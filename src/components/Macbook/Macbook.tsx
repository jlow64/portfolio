/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { useLayoutEffect, useRef, MutableRefObject } from 'react';
import { useGLTF, Html, useScroll, useMask, Mask } from '@react-three/drei';
import { useThree } from '@react-three/fiber';
import { GLTF } from 'three-stdlib';
import gsap from 'gsap';
import Website from '@/components/Website';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Circle001: THREE.Mesh;
    Circle001_1: THREE.Mesh;
    Circle001_2: THREE.Mesh;
    Circle001_3: THREE.Mesh;
    Circle001_4: THREE.Mesh;
    Circle001_5: THREE.Mesh;
    Circle001_6: THREE.Mesh;
    Circle006: THREE.Mesh;
    Circle006_1: THREE.Mesh;
    FrontCameraRing001: THREE.Mesh;
    Circle: THREE.Mesh;
    Circle_1: THREE.Mesh;
    Circle_2: THREE.Mesh;
    KeyboardKeyHole: THREE.Mesh;
    RubberFoot: THREE.Mesh;
    Circle012: THREE.Mesh;
    Circle012_1: THREE.Mesh;
    Circle009: THREE.Mesh;
    Circle009_1: THREE.Mesh;
    Circle003: THREE.Mesh;
    Circle003_1: THREE.Mesh;
    Circle002: THREE.Mesh;
    Circle002_1: THREE.Mesh;
    Circle002_2: THREE.Mesh;
    Circle002_3: THREE.Mesh;
    Circle002_4: THREE.Mesh;
    AppleLogo000: THREE.Mesh;
  };
  materials: {
    ['Frame.001']: THREE.MeshStandardMaterial;
    HeadPhoneHole: THREE.MeshStandardMaterial;
    USB_C_INSIDE: THREE.MeshStandardMaterial;
    TouchbarBorder: THREE.MeshStandardMaterial;
    Keyboard: THREE.MeshStandardMaterial;
    ['CameraRIngBlack.002']: THREE.MeshStandardMaterial;
    ['Keyboard.001']: THREE.MeshStandardMaterial;
    Key: THREE.MeshStandardMaterial;
    Touchbar: THREE.MeshStandardMaterial;
    DarkRubber: THREE.MeshStandardMaterial;
    HingeBlack: THREE.MeshStandardMaterial;
    HingeMetal: THREE.MeshStandardMaterial;
    SpeakerHole: THREE.MeshStandardMaterial;
    ['Frame.001']: THREE.MeshStandardMaterial;
    Screen: THREE.MeshStandardMaterial;
    ScreenGlass: THREE.MeshStandardMaterial;
    Rubber: THREE.MeshStandardMaterial;
    DisplayGlass: THREE.MeshStandardMaterial;
    ['AppleLogo.004']: THREE.MeshStandardMaterial;
  };
};

export type MacbookProps = JSX.IntrinsicElements['group'] & {
  portal: MutableRefObject<HTMLElement>;
};

export default function Macbook({ portal, ...props }: MacbookProps) {
  const { nodes, materials } = useGLTF('./models/mac-draco.gltf') as GLTFResult;
  const ref = useRef<THREE.Group>(null!);
  const screen = useRef<THREE.Mesh>(null!);
  const t1 = useRef<gsap.core.Timeline>(null!);

  const stencil = useMask(1, true);

  const scroll = useScroll();
  const { camera } = useThree();

  useFrame(() => {
    t1.current.seek(scroll.offset * t1.current.duration());
  });

  useLayoutEffect(() => {
    let ctx = gsap.context(() => {
      t1.current = gsap.timeline();
      t1.current
        .fromTo(
          camera.position,
          {
            x: -3,
            y: 1,
            z: 3,
            duration: 2,
            onUpdate: () => {
              camera.lookAt(0, 0, 0);
            },
          },
          {
            x: 1,
            y: 0.5,
            z: 0,
            duration: 2,
            ease: 'power2.inOut',
            onUpdate: () => {
              camera.lookAt(2, 0.4, -9);
            },
          },
        )
        .to(camera.position, {
          x: 2,
          y: 0.8,
          z: -6.5,
          duration: 2,
          onUpdate: () => {
            camera.lookAt(2, 0.4, -9);
          },
          ease: 'power2.inOut',
        });
    }, ref);
    return () => ctx.revert();
  }, []);

  return (
    <group ref={ref} {...props}>
      <group position={[0, 0.5194, 0]} scale={0.1034}>
        <mesh
          geometry={nodes.Circle001.geometry}
          material={materials['Frame.001']}
        />
        <mesh
          geometry={nodes.Circle001_1.geometry}
          material={materials['Frame.001']}
        />
        <mesh
          geometry={nodes.Circle001_2.geometry}
          material={materials.HeadPhoneHole}
        />
        <mesh
          geometry={nodes.Circle001_3.geometry}
          material={materials.USB_C_INSIDE}
        />
        <mesh
          geometry={nodes.Circle001_4.geometry}
          material={materials['Frame.001']}
        />
        <mesh
          geometry={nodes.Circle001_5.geometry}
          material={materials.TouchbarBorder}
        />
        <mesh
          geometry={nodes.Circle001_6.geometry}
          material={materials.Keyboard}
        />
        <group position={[0, -0.5091, 0]} scale={5.7964}>
          <mesh
            geometry={nodes.Circle006.geometry}
            material={materials['Frame.001']}
          />
          <mesh
            geometry={nodes.Circle006_1.geometry}
            material={materials.USB_C_INSIDE}
          />
        </group>
        <mesh
          geometry={nodes.FrontCameraRing001.geometry}
          material={materials['CameraRIngBlack.002']}
          position={[-0.1548, 19.5714, -16.151]}
          scale={5.7964}
        />
        <group position={[-11.7861, -0.1502, -8.3007]} scale={5.7964}>
          <mesh
            geometry={nodes.Circle.geometry}
            material={materials['Keyboard.001']}
          />
          <mesh geometry={nodes.Circle_1.geometry} material={materials.Key} />
          <mesh
            geometry={nodes.Circle_2.geometry}
            material={materials.Touchbar}
          />
        </group>
        <mesh
          geometry={nodes.KeyboardKeyHole.geometry}
          material={materials['Keyboard.001']}
          position={[-11.7861, -0.1524, -8.3007]}
          scale={5.7964}
        />
        <mesh
          geometry={nodes.RubberFoot.geometry}
          material={materials.DarkRubber}
          position={[-11.9515, -0.7507, 7.8574]}
          scale={5.7964}
        />
        <group position={[0.0114, -0.2111, -10.5595]} scale={5.7964}>
          <mesh
            geometry={nodes.Circle012.geometry}
            material={materials.HingeBlack}
          />
          <mesh
            geometry={nodes.Circle012_1.geometry}
            material={materials.HingeMetal}
          />
        </group>
        <group position={[-15.0255, 0.0309, 0.6041]} scale={5.7964}>
          <mesh
            geometry={nodes.Circle009.geometry}
            material={materials['Frame.001']}
          />
          <mesh
            geometry={nodes.Circle009_1.geometry}
            material={materials.SpeakerHole}
          />
        </group>
        <group position={[12.2039, 0.0309, 0.6041]} scale={5.7964}>
          <mesh
            geometry={nodes.Circle003.geometry}
            material={materials['Frame.001']}
          />

          <mesh
            geometry={nodes.Circle003_1.geometry}
            material={materials.SpeakerHole}
          />
        </group>
        <group
          position={[0.0075, -0.4718, -10.4124]}
          rotation={[1.3105, 0, 0]}
          scale={5.7964}
        >
          <Mask
            id={1}
            // ref={screen}
            geometry={nodes.Circle002.geometry}
            // material={materials['Frame.001']}
          >
            <Html
              transform
              scale={0.15}
              rotation-x={-Math.PI / 2}
              position={[0.0, -0.059, -1.9]}
              portal={portal}
              {...stencil}
            >
              <Website />
            </Html>
          </Mask>

          <mesh
            geometry={nodes.Circle002_1.geometry}
            material={materials.Screen}
          />
          <mesh
            geometry={nodes.Circle002_2.geometry}
            material={materials.ScreenGlass}
          />
          <mesh
            geometry={nodes.Circle002_3.geometry}
            material={materials.Rubber}
          />
          <mesh ref={screen} geometry={nodes.Circle002_4.geometry} />
          <mesh
            geometry={nodes.AppleLogo000.geometry}
            material={materials['AppleLogo.004']}
            position={[0.0049, -0.1106, -1.7952]}
            rotation={[-Math.PI, 0, -Math.PI]}
            scale={0.5786}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('./models/mac-draco.gltf');
