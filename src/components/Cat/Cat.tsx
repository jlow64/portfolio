/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Maxwell: THREE.Mesh;
    whiskers: THREE.Mesh;
  };
  materials: {
    Dingus: THREE.MeshStandardMaterial;
    Whiskers: THREE.MeshStandardMaterial;
  };
};

export default function Cat(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    './models/Dingus the cat.glb',
  ) as GLTFResult;

  const catRef = useRef<THREE.Group>(null);

  useFrame(
    ({ clock }) =>
      catRef.current &&
      (catRef.current.rotation.z = Math.sin(clock.getElapsedTime() * 3) * 0.5),
  );

  return (
    <group ref={catRef} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Maxwell.geometry}
        material={materials.Dingus}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.whiskers.geometry}
        material={materials.Whiskers}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
      />
    </group>
  );
}

useGLTF.preload('./models/Dingus the cat.glb');
